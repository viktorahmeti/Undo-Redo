let getDefaultState = () => {
    return {
        brightness: 100,
        contrast: 100,
        saturate: 100,
        sepia: 0
    };
}

let state = getDefaultState();

let controls = [];
controls.push(document.getElementById("brightness"));
controls.push(document.getElementById("contrast"));
controls.push(document.getElementById("saturate"));
controls.push(document.getElementById("sepia"));

let savedStates = [];
let redoStack = [];

let updateState = (newState) => {
    state.brightness = newState.brightness;
    state.contrast = newState.contrast;
    state.saturate = newState.saturate;
    state.sepia = newState.sepia;

    controls.forEach((control) => {
        control.value = state[control.id];
    });

    undoButton.disabled = savedStates.length === 0;
    redoButton.disabled = redoStack.length === 0;
    downloadButton.disabled = savedStates.length === 0;

    applyFilters(newState);
}

let photo = document.getElementById("photo");
let applyFilters = (state) => {
    photo.style.filter = `brightness(${state.brightness}%) contrast(${state.contrast}%) saturate(${state.saturate}%) sepia(${state.sepia}%)`;
}

controls.forEach((control) => {
    control.onchange = () => {
        redoStack = [];

        let newState = JSON.parse(JSON.stringify(state));
        newState[control.id] = parseInt(control.value);
        
        savedStates.push(cloneCurrentState());

        updateState(newState);
    }
});

// Undo Functionality
let undoButton = document.getElementById("undoButton");
undoButton.onclick = () => {
    let previousState = savedStates.pop();

    if(previousState){
        redoStack.push(cloneCurrentState());
        updateState(previousState)
    }
}

//Redo Functionality
let redoButton = document.getElementById("redoButton");
redoButton.onclick = () => {
    let nextState = redoStack.pop()

    if(nextState){
        savedStates.push(cloneCurrentState());
        updateState(nextState);
    }
}

// Reset functionality
let resetButton = document.getElementById("resetButton");
resetButton.onclick = () => {
    savedStates = [];
    redoStack = [];
    let originalState = getDefaultState();
    updateState(originalState);
}

function cloneCurrentState(){
    return JSON.parse(JSON.stringify(state));
}   

//Dowload Functionality
let downloadButton = document.getElementById('downloadButton');
downloadButton.onclick = downloadFilteredImage;

//a helper function to download the image (Generated by GPT 3.5)
function downloadFilteredImage() {
    var originalImage = document.getElementById('photo');
    
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');

    canvas.width = originalImage.naturalWidth;
    canvas.height = originalImage.naturalHeight;

    ctx.filter = getComputedStyle(originalImage).filter;
    
    ctx.drawImage(originalImage, 0, 0);
    
    var dataURL = canvas.toDataURL('image/png');
    
    var downloadLink = document.createElement('a');
    downloadLink.href = dataURL;
    downloadLink.download = 'filtered-image.png';
    
    downloadLink.click();
}